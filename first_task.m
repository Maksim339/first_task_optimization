% Очищаем переменные YALMIP и очищаем командное окно
yalmip('clear');
clc;

% Определяем переменные решения
a = sdpvar(6,1);

% Определяем многочленную функцию
p = @(x) a(1) + a(2)*x + a(3)*x.^2 + a(4)*x.^3 + a(5)*x.^4 + a(6)*x.^5;

% Создаём массив значений x от 0 до 10 с шагом 0.1
x = 0:0.1:10;

% Инициализируем массив ограничений
Constraints = [];

% Добавляем ограничения для каждого значения x
for i = 1:length(x)
    Constraints = [Constraints, 0 <= p(x(i)) <= 5];
end

% Добавляем специфические ограничения для многочлена
Constraints = [Constraints, p(0) <= 1, p(3) >= 4, p(7) <= 1, 2 <= p(10) <= 3];

% Определяем целевую функцию как сумму квадратов последних трех коэффициентов
Objective = a(6)^2 + a(5)^2 + a(4)^2;

% Настраиваем параметры решателя
options = sdpsettings('solver','sdpt3');

% Решаем задачу оптимизации
sol = optimize(Constraints,Objective,options);

% Проверяем, было ли решение успешным
if sol.problem == 0
    % Получаем значения коэффициентов многочлена
    a_value = value(a);
    disp('Коэффициенты многочлена:');
    disp(a_value);

    % Строим график многочлена
    fplot(@(x) value(p(x)), [0, 10]);
    grid on;
    xlabel('x');
    ylabel('p(x)');
    title('Многочлен пятой степени');
else
    disp('Не удалось найти решение');
end
